{"version":3,"sources":["components/Timer/index.js","components/Timer/hooks/useInterval.js","components/app/index.js","serviceWorker.js","index.js"],"names":["Timer","useState","Moment","duration","timer","setTimer","minutes","seconds","clock","setClock","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","asSeconds","subtract","toString","Index","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA4BeA,EAxBD,WAAO,IAAD,EACOC,mBAASC,IAAOC,SAAS,GAAI,YADpC,mBACZC,EADY,KACLC,EADK,OAEOJ,mBAAS,CAClCK,QAAS,GACTC,QAAS,KAJS,mBAEZC,EAFY,KAELC,EAFK,KAiBnB,OCnBc,SAACC,EAAUC,GACzB,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACTF,EAAcG,QAAUL,IACtB,CAACA,IAEJI,qBAAU,WAIT,IAAME,EAAKC,aAHX,WACCL,EAAcG,YAEcJ,GAC7B,OAAO,kBAAMO,cAAcF,MACzB,CAACL,IDJJQ,EAAY,WACPf,EAAMgB,YAAc,GAAK,IAC5Bf,EAASD,EAAMiB,SAAS,EAAG,YAC3BZ,EAAS,CACRH,QAASF,EAAME,UAAUgB,WACzBf,QAASH,EAAMG,UAAUe,gBAGzB,KAGF,oCACC,qCACA,sCAAQd,EAAMF,QAAd,YAAyBE,EAAMD,YETnBgB,MAVf,WACC,OACC,yBAAKC,UAAU,OACd,4BAAQA,UAAU,cACjB,kBAAC,EAAD,SCGgBC,QACU,cAA7BC,OAAOC,SAASC,UAEmB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC3B,2DCZLC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H9C,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3357fd4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Moment from 'moment';\nimport useInterval from './hooks/useInterval';\n\nconst Timer = () => {\n\tconst [timer, setTimer] = useState(Moment.duration(25, 'minutes'));\n\tconst [clock, setClock] = useState({\n\t\tminutes: '',\n\t\tseconds: '',\n\t});\n\n\tuseInterval(() => {\n\t\tif (timer.asSeconds() - 1 >= 0) {\n\t\t\tsetTimer(timer.subtract(1, 'seconds'));\n\t\t\tsetClock({\n\t\t\t\tminutes: timer.minutes().toString(),\n\t\t\t\tseconds: timer.seconds().toString(),\n\t\t\t});\n\t\t}\n\t}, 1000);\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Timer</h1>\n\t\t\t<h2>{`${clock.minutes}:${clock.seconds}`}</h2>\n\t\t</>\n\t);\n};\nexport default Timer;\n","import { useEffect, useRef } from 'react';\n\nexport default (callback, delay) => {\n\tconst savedCallback = useRef();\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tfunction tick() {\n\t\t\tsavedCallback.current();\n\t\t}\n\t\tconst id = setInterval(tick, delay);\n\t\treturn () => clearInterval(id);\n\t}, [delay]);\n};\n","import React from 'react';\nimport './App.css';\n\nimport Timer from '../Timer';\n\nfunction Index() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Timer />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. Index is running in offline mode.',\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Index from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n"],"sourceRoot":""}